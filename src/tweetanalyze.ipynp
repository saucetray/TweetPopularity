{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BERTClassification",
      "provenance": [],
      "collapsed_sections": [
        "qYzEHqqlgx1S"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "0705999e045845be9854e917dd0ab92e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_3c56d9ff1a714d3ba0864844478cda7d",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_cdb6cf3e428e441c8fa6d4f0e1c90fe0",
              "IPY_MODEL_6eff1a3259754340bfe94e156f5e64fb"
            ]
          }
        },
        "3c56d9ff1a714d3ba0864844478cda7d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "cdb6cf3e428e441c8fa6d4f0e1c90fe0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_1ae48c3800524b2b8f23445468a7020e",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 433,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 433,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1e34bd77078a490980846b95b6dcd188"
          }
        },
        "6eff1a3259754340bfe94e156f5e64fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_e1de4056e27e4041b8b3c6112378128a",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 433/433 [01:44&lt;00:00, 4.14B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2a3e4bb383db44018a6f23b88f969f17"
          }
        },
        "1ae48c3800524b2b8f23445468a7020e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1e34bd77078a490980846b95b6dcd188": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e1de4056e27e4041b8b3c6112378128a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2a3e4bb383db44018a6f23b88f969f17": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4013e33d385a471382a8670aedc7ce5d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_210c58c81fa444d9b5a3b5fe965de1dd",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_318e4184939c426290a574bf7388feac",
              "IPY_MODEL_d6a7ba8f56034188b9721d311ff2d9d2"
            ]
          }
        },
        "210c58c81fa444d9b5a3b5fe965de1dd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "318e4184939c426290a574bf7388feac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_fc96819819a34cb0a1f9d216a97dff03",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 440473133,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 440473133,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_282557816b274a2da4bc921dfbc80026"
          }
        },
        "d6a7ba8f56034188b9721d311ff2d9d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_95fb34fa1ae74fb1b59c7d183a529d1f",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 440M/440M [00:06&lt;00:00, 64.2MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5dfa654a409442b8b0fdb14a1d298723"
          }
        },
        "fc96819819a34cb0a1f9d216a97dff03": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "282557816b274a2da4bc921dfbc80026": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "95fb34fa1ae74fb1b59c7d183a529d1f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5dfa654a409442b8b0fdb14a1d298723": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qYzEHqqlgx1S"
      },
      "source": [
        "# RUNNING\n",
        "Please use a GPU to increase the speed of this.\n",
        "If you don't... it will take longer but you can still use this at the expense of your time.\n",
        "\n",
        "## Where Tested\n",
        "\n",
        "This is tested on Google Colab and also works on your own computer with \n",
        "the correct libraries.\n",
        "\n",
        "# ACKOWLEDGEMENT\n",
        "**Moat of the code here is taken or inspired by https://mccormickml.com/2019/07/22/BERT-fine-tuning/#41-bertforsequenceclassification**\n",
        "\n",
        "**The Bert pre-trained model is from https://github.com/VinAIResearch/BERTweet**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tyr1JS3oo4d7"
      },
      "source": [
        "# Importing and Installing Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2CkOaSmyo9Fb",
        "outputId": "61b856e9-2225-4b0d-d412-719b357506c4"
      },
      "source": [
        "!pip install transformers\n",
        "!pip install emoji"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting transformers\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/84/7bc03215279f603125d844bf81c3fb3f2d50fe8e511546eb4897e4be2067/transformers-4.0.0-py3-none-any.whl (1.4MB)\n",
            "\r\u001b[K     |▎                               | 10kB 22.0MB/s eta 0:00:01\r\u001b[K     |▌                               | 20kB 16.4MB/s eta 0:00:01\r\u001b[K     |▊                               | 30kB 14.8MB/s eta 0:00:01\r\u001b[K     |█                               | 40kB 14.4MB/s eta 0:00:01\r\u001b[K     |█▏                              | 51kB 11.9MB/s eta 0:00:01\r\u001b[K     |█▌                              | 61kB 12.0MB/s eta 0:00:01\r\u001b[K     |█▊                              | 71kB 11.8MB/s eta 0:00:01\r\u001b[K     |██                              | 81kB 12.0MB/s eta 0:00:01\r\u001b[K     |██▏                             | 92kB 12.8MB/s eta 0:00:01\r\u001b[K     |██▍                             | 102kB 12.9MB/s eta 0:00:01\r\u001b[K     |██▋                             | 112kB 12.9MB/s eta 0:00:01\r\u001b[K     |███                             | 122kB 12.9MB/s eta 0:00:01\r\u001b[K     |███▏                            | 133kB 12.9MB/s eta 0:00:01\r\u001b[K     |███▍                            | 143kB 12.9MB/s eta 0:00:01\r\u001b[K     |███▋                            | 153kB 12.9MB/s eta 0:00:01\r\u001b[K     |███▉                            | 163kB 12.9MB/s eta 0:00:01\r\u001b[K     |████▏                           | 174kB 12.9MB/s eta 0:00:01\r\u001b[K     |████▍                           | 184kB 12.9MB/s eta 0:00:01\r\u001b[K     |████▋                           | 194kB 12.9MB/s eta 0:00:01\r\u001b[K     |████▉                           | 204kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████                           | 215kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 225kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 235kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 245kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████                          | 256kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████▎                         | 266kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 276kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 286kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████                         | 296kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 307kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████▌                        | 317kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 327kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████                        | 337kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 348kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 358kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 368kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████                       | 378kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 389kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 399kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 409kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████                      | 419kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 430kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 440kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 450kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████                     | 460kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 471kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 481kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 491kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 501kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 512kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 522kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████▋                   | 532kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 542kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 552kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 563kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 573kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 583kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 593kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 604kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 614kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 624kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 634kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 645kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 655kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 665kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████                | 675kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 686kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 696kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████▊               | 706kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 716kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 727kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 737kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 747kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 757kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 768kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 778kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 788kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 798kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████▏            | 808kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████▍            | 819kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 829kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 839kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 849kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 860kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 870kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 880kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 890kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 901kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 911kB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 921kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 931kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 942kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 952kB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 962kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 972kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████▎        | 983kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████▌        | 993kB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 1.0MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 1.0MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 1.0MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 1.0MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 1.0MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▏      | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▌      | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 1.1MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▎  | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 1.2MB 12.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▌| 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 1.3MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.4MB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.4MB 12.9MB/s \n",
            "\u001b[?25hRequirement already satisfied: dataclasses; python_version < \"3.7\" in /usr/local/lib/python3.6/dist-packages (from transformers) (0.8)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.6/dist-packages (from transformers) (3.0.12)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from transformers) (20.4)\n",
            "Collecting tokenizers==0.9.4\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/0f/1c/e789a8b12e28be5bc1ce2156cf87cb522b379be9cadc7ad8091a4cc107c4/tokenizers-0.9.4-cp36-cp36m-manylinux2010_x86_64.whl (2.9MB)\n",
            "\u001b[K     |████████████████████████████████| 2.9MB 52.6MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from transformers) (2.23.0)\n",
            "Collecting sacremoses\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7d/34/09d19aff26edcc8eb2a01bed8e98f13a1537005d31e95233fd48216eed10/sacremoses-0.0.43.tar.gz (883kB)\n",
            "\u001b[K     |████████████████████████████████| 890kB 42.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.6/dist-packages (from transformers) (4.41.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.6/dist-packages (from transformers) (2019.12.20)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from transformers) (1.18.5)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from packaging->transformers) (2.4.7)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from packaging->transformers) (1.15.0)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (3.0.4)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (2020.11.8)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (2.10)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers) (7.1.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers) (0.17.0)\n",
            "Building wheels for collected packages: sacremoses\n",
            "  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sacremoses: filename=sacremoses-0.0.43-cp36-none-any.whl size=893257 sha256=9187e4eb513a7a173268e586e316d643fad53057dba6d5e013208f0515e71eaf\n",
            "  Stored in directory: /root/.cache/pip/wheels/29/3c/fd/7ce5c3f0666dab31a50123635e6fb5e19ceb42ce38d4e58f45\n",
            "Successfully built sacremoses\n",
            "Installing collected packages: tokenizers, sacremoses, transformers\n",
            "Successfully installed sacremoses-0.0.43 tokenizers-0.9.4 transformers-4.0.0\n",
            "Collecting emoji\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ff/1c/1f1457fe52d0b30cbeebfd578483cedb3e3619108d2d5a21380dfecf8ffd/emoji-0.6.0.tar.gz (51kB)\n",
            "\u001b[K     |████████████████████████████████| 51kB 5.9MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: emoji\n",
            "  Building wheel for emoji (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for emoji: filename=emoji-0.6.0-cp36-none-any.whl size=49716 sha256=7f2216fcd6e80360be10b488502768098853317a57e5c81383140e36ff7d27e0\n",
            "  Stored in directory: /root/.cache/pip/wheels/46/2c/8b/9dcf5216ca68e14e0320e283692dce8ae321cdc01e73e17796\n",
            "Successfully built emoji\n",
            "Installing collected packages: emoji\n",
            "Successfully installed emoji-0.6.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tuvfh5Kdx3iO"
      },
      "source": [
        "# imports\n",
        "\n",
        "import json\n",
        "import transformers\n",
        "import pandas as pd\n",
        "import torch\n",
        "from sklearn.metrics import matthews_corrcoef\n",
        "import torch\n",
        "from transformers import AutoModel, AutoTokenizer \n",
        "\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import statistics\n",
        "\n",
        "import numpy as np\n",
        "import time\n",
        "import datetime\n",
        "import random\n",
        "import joblib\n",
        "\n",
        "from nltk.tokenize import TweetTokenizer\n",
        "from transformers import BertTokenizer\n",
        "\n",
        "# Load the BERT tokenizer.\n",
        "from torch.utils.data import TensorDataset, random_split\n",
        "from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n",
        "\n",
        "from transformers import BertForSequenceClassification, AdamW, BertConfig\n",
        "from transformers import get_linear_schedule_with_warmup\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.metrics import confusion_matrix, precision_score\n",
        "from sklearn.metrics import recall_score, classification_report\n",
        "from transformers import BertweetTokenizer\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', normalization=True)\n"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4n-nqsI9qWV3"
      },
      "source": [
        "# Loading Existing Model and Parameters\n",
        "\n",
        "## The Existing Model\n",
        "\n",
        "You can load the existing model here that was created and stored in model_save. This model can then be used to train again or to classify tweets\n",
        "\n",
        "## The Parameters\n",
        "\n",
        "The parameters (the data loaders) are stored and loaded as well so that training can happen the same exact way."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vMPoraPx55oV",
        "outputId": "cb8e554e-6a76-48cf-c475-dcb2b7c76aee"
      },
      "source": [
        "!unzip ./model_save.zip"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Archive:  ./model_save.zip\n",
            "   creating: model_save/\n",
            "  inflating: model_save/pytorch_model.bin  \n",
            "  inflating: model_save/tokenizer_config.json  \n",
            "  inflating: model_save/config.json  \n",
            "  inflating: model_save/vocab.txt    \n",
            "   creating: model_save/params/\n",
            "  inflating: model_save/params/training_data_loader  \n",
            "  inflating: model_save/params/validation_data_loader  \n",
            "  inflating: model_save/special_tokens_map.json  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z9DD7aCeqV8J",
        "outputId": "c809aede-18a0-4411-b039-856fa9d768a2"
      },
      "source": [
        "save_dir = './model_save/'\n",
        "save_dir_params = './model_save/params/'\n",
        "model = BertForSequenceClassification.from_pretrained(save_dir)\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', normalization=True)\n",
        "\n",
        "with open(save_dir_params + 'training_data_loader', 'rb') as f:\n",
        "  train_dataloader = joblib.load(f)  # loading data used in training\n",
        "with open(save_dir_params + 'validation_data_loader', 'rb') as f:\n",
        "  validation_dataloader = joblib.load(f)  # loading data used in training\n",
        "\n",
        "# Copy the model to the GPU.\n",
        "model.to(get_gpu())"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BertForSequenceClassification(\n",
              "  (bert): BertModel(\n",
              "    (embeddings): BertEmbeddings(\n",
              "      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n",
              "      (position_embeddings): Embedding(512, 768)\n",
              "      (token_type_embeddings): Embedding(2, 768)\n",
              "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "      (dropout): Dropout(p=0.1, inplace=False)\n",
              "    )\n",
              "    (encoder): BertEncoder(\n",
              "      (layer): ModuleList(\n",
              "        (0): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (1): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (2): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (3): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (4): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (5): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (6): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (7): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (8): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (9): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (10): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (11): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (pooler): BertPooler(\n",
              "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "      (activation): Tanh()\n",
              "    )\n",
              "  )\n",
              "  (dropout): Dropout(p=0.1, inplace=False)\n",
              "  (classifier): Linear(in_features=768, out_features=2, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7zTgRJVsrP3N"
      },
      "source": [
        "# GPU and Required Code Throughout\n",
        "It is encouraged to run this with a GPU\n",
        "\n",
        "If using google colab, go to runtime -> change runtime type -> GPU\n",
        "\n",
        "Also run all of these cells as they are needed"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AjfeUJAEvtk0"
      },
      "source": [
        "# If there's a GPU available or returns the cpu...\n",
        "\n",
        "def exists_gpu():\n",
        "  if torch.cuda.is_available():\n",
        "    return True\n",
        "  else:\n",
        "    return False\n",
        "\n",
        "def get_gpu():\n",
        "  if exists_gpu():\n",
        "      return torch.device(\"cuda\")\n",
        "      print('We will use the GPU:', torch.cuda.get_device_name(0))\n",
        "  else:\n",
        "      print('No GPU available, using the CPU instead.')\n",
        "      return torch.device(\"cpu\")\n"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0a-7ankV7aCo"
      },
      "source": [
        "# this block is for preprocessing tweets into a CSV\n",
        "\n",
        "# gets our tweet data from celebrities.\n",
        "# our celebrity json is different from our random tweets.\n",
        "# our celebrity json files are formatted differently.\n",
        "# You can find our formats in the accompanying .md files\n",
        "def get_tweets_into_csv_from_celebrities(csv_file, files):\n",
        "  count = 0\n",
        "  sentiments = []\n",
        "  if os.path.exists(csv_file):\n",
        "    os.remove(csv_file)\n",
        "  with open(csv_file, 'w+') as t:\n",
        "    # t.write('sentence_source,label,label_notes,sentence\\n')\n",
        "    for file in files:\n",
        "      if os.path.exists(file) and file.split('.')[-1] == 'json':\n",
        "        tweets = []\n",
        "        popular_indexes = []\n",
        "        try:\n",
        "          with open(file, 'r') as f:\n",
        "            tweets_data = json.load(f)\n",
        "          # followers and name are maybe useful\n",
        "          followers = tweets_data['user_info']['public_metrics']['followers_count']\n",
        "          name      = tweets_data['user_info']['name']\n",
        "          # this loops through every tweet we have and puts it into a format\n",
        "          # so that we can determine if it is popular and then write to a csv\n",
        "          for tweet in tweets_data['data']:\n",
        "            count += 1\n",
        "            sentiments.append(tweet['sentiment_score'])\n",
        "            retweets  = tweet['public_metrics']['retweet_count']\n",
        "            replies   = tweet['public_metrics']['reply_count']\n",
        "            quotes    = tweet['public_metrics']['quote_count']\n",
        "            likes     = tweet['public_metrics']['like_count']\n",
        "            tweet     = '\\\"' + tweet['text'].replace('\\n', '').replace(',','') + '\\\"'\n",
        "            popular   = popularity_index(likes, replies, quotes, retweets)\n",
        "            popular_indexes.append(popular)\n",
        "            tweets.append([name, followers, retweets, replies, quotes, \n",
        "                            likes, tweet, None])\n",
        "          stdev = statistics.pstdev(popular_indexes)\n",
        "          average = statistics.mean(popular_indexes)\n",
        "\n",
        "          for tweet, index in zip(tweets, popular_indexes):\n",
        "            normal = normalize(average, stdev, index)\n",
        "            if normal < .5:\n",
        "              tweet[7] = 0\n",
        "            else:\n",
        "              tweet[7] = 1\n",
        "            \n",
        "            # write to the file\n",
        "            t.write('%s,%i,%s,%s\\n' % (tweet[0], tweet[7], 'NaN', \n",
        "                                                    tweet[6]))\n",
        "        except:\n",
        "            print('File %s is corrupted' % file)\n",
        "\n",
        "  return count, sentiments\n",
        "\n",
        "# normalizes our tweets so 2/3 of data is between 0.25 and 0.75\n",
        "def normalize(average, stdev, index):\n",
        "  almost_normal = (index - average) / stdev\n",
        "  # remove any extrenuous data\n",
        "  if almost_normal < -2:\n",
        "    almost_normal = -2\n",
        "  elif almost_normal > 2:\n",
        "    almost_normal = 2\n",
        "  \n",
        "  return almost_normal / 5 + .5\n",
        "\n",
        "# we will use this to determine if a tweet is popular\n",
        "def popularity_index(likes, replies, quotes, retweets):\n",
        "  return likes\n",
        "  "
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ILjlT-s9qNxh"
      },
      "source": [
        "# these are for accuracy purposes courtesy of \n",
        "# https://mccormickml.com/2019/07/22/BERT-fine-tuning/#41-bertforsequenceclassification\n",
        "def flat_accuracy(preds, labels):\n",
        "    pred_flat = np.argmax(preds, axis=1).flatten()\n",
        "    labels_flat = labels.flatten()\n",
        "    return np.sum(pred_flat == labels_flat) / len(labels_flat)\n",
        "\n",
        "def format_time(elapsed):\n",
        "    # Round to the nearest second.\n",
        "    elapsed_rounded = int(round((elapsed)))\n",
        "    \n",
        "    # Format as hh:mm:ss\n",
        "    return str(datetime.timedelta(seconds=elapsed_rounded))"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aeM0BEkserSe"
      },
      "source": [
        "# this will evaluate our baseline so we can compare it to our bert later to see if there is any improvement\n",
        "# we might try to even incorporate a word2vec instead of this baseline so it is a little better\n",
        "# since word2vec and bert both try to vectorize words\n",
        "\n",
        "def normalize_sentiment_values(sentiment_values):\n",
        "  print(len(sentiment_values))\n",
        "  for index in range(len(sentiment_values)):\n",
        "    value = sentiment_values[index]\n",
        "    if value < 0.5:\n",
        "      sentiment_values[index] = 0\n",
        "    elif value >= 0.5:\n",
        "      sentiment_values[index] = 1\n",
        "  return sentiment_values\n",
        "      \n",
        "def evaluate(y_true, sentiment_values):\n",
        "  y_pred = normalize_sentiment_values(sentiment_values)\n",
        "  print(len(y_pred))\n",
        "  print('confusion matrix :\\n', confusion_matrix(y_true,y_pred))\n",
        "  print('precision_score :\\n', precision_score(y_true,y_pred,pos_label=1))\n",
        "  print('recall_score :\\n', recall_score(y_true,y_pred,pos_label=1))\n",
        "  print('classification_report :\\n', classification_report(y_true,y_pred)) \n"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GDt_F845BXtb"
      },
      "source": [
        "def get_tweets_into_csv_from_random(csv_file, file):\n",
        "  count = 0\n",
        "  sentiments = []\n",
        "  if os.path.exists(csv_file):\n",
        "    os.remove(csv_file)\n",
        "  with open(csv_file, 'w+') as t:\n",
        "    if os.path.exists(file) and file.split('.')[-1] == 'json':\n",
        "      tweets = []\n",
        "      popular_indexes = []\n",
        "      with open(file, 'r') as f:\n",
        "        tweets_data = json.load(f)\n",
        "      for data in tweets_data['data']:\n",
        "        name      = data['name']\n",
        "        followers = data['public_metrics']['followers_count']\n",
        "        for tweet in data['tweets']:\n",
        "          count += 1\n",
        "          sentiments.append(tweet['sentiment_score'])\n",
        "          retweets  = tweet['public_metrics']['retweet_count']\n",
        "          replies   = tweet['public_metrics']['reply_count']\n",
        "          quotes    = tweet['public_metrics']['quote_count']\n",
        "          likes     = tweet['public_metrics']['like_count']\n",
        "          tweet     = '\\\"' + tweet['text'].replace('\\n', '').replace(',','') + '\\\"'\n",
        "          popular   = popularity_index(likes, replies, quotes, retweets)\n",
        "          popular_indexes.append(popular)\n",
        "          tweets.append([name, followers, retweets, replies, quotes, \n",
        "                          likes, tweet, None])\n",
        "        stdev = statistics.pstdev(popular_indexes)\n",
        "        average = statistics.mean(popular_indexes)\n",
        "\n",
        "        for tweet, index in zip(tweets, popular_indexes):\n",
        "          normal = normalize(average, stdev, index)\n",
        "          if normal < .5:\n",
        "            tweet[7] = 0\n",
        "          else:\n",
        "            tweet[7] = 1\n",
        "          \n",
        "          # write to the file\n",
        "          t.write('%s,%i,%s,%s\\n' % (tweet[0], tweet[7], 'NaN', \n",
        "                                                  tweet[6]))\n",
        "\n",
        "  return count, sentiments"
      ],
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p7ghR_5lo9kX"
      },
      "source": [
        "# Training Algorithms\n",
        "\n",
        "Training is done in the below scripts. \n",
        "It is important that you run the ones you want to run.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L0_oJXuo7vYq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20eb9cff-a492-463d-93e3-b08a1c1355ee"
      },
      "source": [
        "# preprocesssing of any set of .json data for tweets.... \n",
        "# this goes through all the json files in a director\n",
        "from os import walk\n",
        "\n",
        "tweet_directory = '.' # change if you want to change where the json files are \n",
        "                      # located. \n",
        "f = []\n",
        "for (dirpath, dirnames, filenames) in walk(tweet_directory):\n",
        "    f = filenames\n",
        "    break\n",
        "\n",
        "train_data_celebs = f[:int(len(f)//1.3)]\n",
        "\n",
        "csv_file_train_celeb = 'tweets_train_celeb.csv'\n",
        "\n",
        "count_train_celebs, sentiments_train_celebs = get_tweets_into_csv_from_celebrities(csv_file=csv_file_train_celeb, files=train_data_celebs)\n",
        "\n",
        "print('Amount of tweets in the training pool: %i' % count_train_celebs)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Amount of tweets in the training pool: 2693\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1pOzv4S27yBb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "outputId": "edef6991-b818-44a7-960e-6b332f9968e0"
      },
      "source": [
        "# Load the dataset into a pandas dataframe.\n",
        "df_train_celeb = pd.read_csv(csv_file_train_celeb, delimiter=',', header=None, \n",
        "                             names=['sentence_source', 'label', \n",
        "                                    'label_notes', 'sentence'])\n",
        "\n",
        "print('Number of training sentences: %i \\n' % df_train_celeb.shape[0])\n",
        "# display random rows\n",
        "df_train_celeb.sample(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of training sentences: 2693 \n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sentence_source</th>\n",
              "      <th>label</th>\n",
              "      <th>label_notes</th>\n",
              "      <th>sentence</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>459</th>\n",
              "      <td>Justin Bieber</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Well deserved @justinbieber! He's taking home ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2189</th>\n",
              "      <td>Avril Lavigne</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Love this 🙏🙏🙏 https://t.co/cnXQBcSCf8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>Dwayne Johnson</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Just posted a photo https://t.co/NmHWn8HuqX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2501</th>\n",
              "      <td>Lil Wayne WEEZY F</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>I live the way I love and love the way I live....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1837</th>\n",
              "      <td>Leonardo DiCaprio</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://t.co/XNxhIEg49E</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>291</th>\n",
              "      <td>Marshall Mathers</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>In response to @revolttv... https://t.co/XrFJi...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1685</th>\n",
              "      <td>ESPN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Luka Garza's 76 points over his last two games...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1146</th>\n",
              "      <td>Liam</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>#NaughtyList featuring @dixiedamelio is OUT NO...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Bernie Sanders</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Amazon Facebook Google and Apple made over $54...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>958</th>\n",
              "      <td>Cole M. Sprouse</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>My ass the thickiest.  My toks the tickiest.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        sentence_source  ...                                           sentence\n",
              "459       Justin Bieber  ...  Well deserved @justinbieber! He's taking home ...\n",
              "2189      Avril Lavigne  ...              Love this 🙏🙏🙏 https://t.co/cnXQBcSCf8\n",
              "197      Dwayne Johnson  ...        Just posted a photo https://t.co/NmHWn8HuqX\n",
              "2501  Lil Wayne WEEZY F  ...  I live the way I love and love the way I live....\n",
              "1837  Leonardo DiCaprio  ...                            https://t.co/XNxhIEg49E\n",
              "291    Marshall Mathers  ...  In response to @revolttv... https://t.co/XrFJi...\n",
              "1685               ESPN  ...  Luka Garza's 76 points over his last two games...\n",
              "1146               Liam  ...  #NaughtyList featuring @dixiedamelio is OUT NO...\n",
              "31       Bernie Sanders  ...  Amazon Facebook Google and Apple made over $54...\n",
              "958     Cole M. Sprouse  ...       My ass the thickiest.  My toks the tickiest.\n",
              "\n",
              "[10 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3dZUBwam70EY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "820d3d2b-f449-48fb-fba7-1b50720c6a49"
      },
      "source": [
        "# print some samples of our data to show that everything is good ...\n",
        "print('----------------------Popular-----------------------')\n",
        "print(df_train_celeb.loc[df_train_celeb.label == 1].sample(10)[['sentence', 'label']])\n",
        "print('---------------------Un-Popular---------------------')\n",
        "print(df_train_celeb.loc[df_train_celeb.label == 0].sample(10)[['sentence', 'label']])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------------------Popular-----------------------\n",
            "                                               sentence  label\n",
            "2069  Milan was so happy this morning to learn that ...      1\n",
            "2420  How about a little #90svibes to bring some fas...      1\n",
            "1122                                 Miss it every day!      1\n",
            "1414                                   Y’all catchin on      1\n",
            "2240  Education today tends to focus on material goa...      1\n",
            "1968  #PCAs @peopleschoice leggooooo ☄️💥🔥✨ (song: NT...      1\n",
            "909   Laugh now Cry later (Official Video) https://t...      1\n",
            "524   We hope to confirm a record tomorrow which wil...      1\n",
            "1377  Whatever women do they must do twice as well a...      1\n",
            "1816  Make sure you take care of yourself while the ...      1\n",
            "---------------------Un-Popular---------------------\n",
            "                                               sentence  label\n",
            "2315  Cheers 🥃 To Corporations Asking For More Ludac...      0\n",
            "1298  'I wasn't made for rain where's the sun!?' htt...      0\n",
            "317   Want to wear\" my Twitter quotes and other cosm...      0\n",
            "1004  Watch this month's best SoulCalibur VI players...      0\n",
            "2032                 #LockHimUp https://t.co/rKAW8smqFy      0\n",
            "1663  Happy Birthday 🎂🎁🎈 @agnezmo https://t.co/vMMwt...      0\n",
            "1525  “Jingle Jangle: A Christmas Journey” is coming...      0\n",
            "2110  Watch me play @ELLEmagazine's Song Association...      0\n",
            "1119  New merch alert! Drop 1 is now live on the mer...      0\n",
            "69    Aston Villa took the Carabao Cup!  Up the Vill...      0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R4GiSSCXgiTM",
        "outputId": "7df3a947-c2e8-4e37-a346-59524b3ed76f"
      },
      "source": [
        "# to evaluate our baseline\n",
        "# we should use a baseline using word2vec probably\n",
        "\n",
        "labels = list(df_train_celeb.label.values)\n",
        "evaluate(labels, sentiments_train_celebs)\n",
        "matthews_corrcoef(labels, sentiments_train_celebs)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2693\n",
            "2693\n",
            "confusion matrix :\n",
            " [[ 216 1740]\n",
            " [ 105  632]]\n",
            "precision_score :\n",
            " 0.26644182124789206\n",
            "recall_score :\n",
            " 0.8575305291723202\n",
            "classification_report :\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.67      0.11      0.19      1956\n",
            "           1       0.27      0.86      0.41       737\n",
            "\n",
            "    accuracy                           0.31      2693\n",
            "   macro avg       0.47      0.48      0.30      2693\n",
            "weighted avg       0.56      0.31      0.25      2693\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.04408604396716041"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VwC2KC0J72La",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2e4e2c9-3876-4cad-c7eb-56586a84e163"
      },
      "source": [
        "sentences = df_train_celeb.sentence.values\n",
        "labels = df_train_celeb.label.values\n",
        "# Print the original sentence.\n",
        "print(' Original: ', sentences[0])\n",
        "\n",
        "# Print the sentence split into tokens.\n",
        "print('Tokenized: ', tokenizer.tokenize(sentences[0]))\n",
        "\n",
        "# Print the sentence mapped to token ids.\n",
        "print('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " Original:  Big banks are making record profits by charging sky-high interest rates &amp; fees. Unacceptable. If we're going to rebuild the middle class we must significantly reduce consumer debt. I will be reintroducing my bill to end Wall Street greed &amp; cap credit card interest rates at 15%.\n",
            "Tokenized:  ['big', 'banks', 'are', 'making', 'record', 'profits', 'by', 'charging', 'sky', '-', 'high', 'interest', 'rates', '&', 'amp', ';', 'fees', '.', 'unacceptable', '.', 'if', 'we', \"'\", 're', 'going', 'to', 'rebuild', 'the', 'middle', 'class', 'we', 'must', 'significantly', 'reduce', 'consumer', 'debt', '.', 'i', 'will', 'be', 'rein', '##tro', '##du', '##cing', 'my', 'bill', 'to', 'end', 'wall', 'street', 'greed', '&', 'amp', ';', 'cap', 'credit', 'card', 'interest', 'rates', 'at', '15', '%', '.']\n",
            "Token IDs:  [2502, 5085, 2024, 2437, 2501, 11372, 2011, 13003, 3712, 1011, 2152, 3037, 6165, 1004, 23713, 1025, 9883, 1012, 21873, 1012, 2065, 2057, 1005, 2128, 2183, 2000, 14591, 1996, 2690, 2465, 2057, 2442, 6022, 5547, 7325, 7016, 1012, 1045, 2097, 2022, 27788, 13181, 8566, 6129, 2026, 3021, 2000, 2203, 2813, 2395, 22040, 1004, 23713, 1025, 6178, 4923, 4003, 3037, 6165, 2012, 2321, 1003, 1012]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zpuY7iDM738U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5cac465-1bd3-4c0f-f448-05a050ede0cf"
      },
      "source": [
        "# Tokenize all of the sentences and map the tokens to their word IDs.\n",
        "input_ids = []\n",
        "attention_masks = []\n",
        "\n",
        "for sent in sentences:\n",
        "    encoded_dict = tokenizer.encode_plus(\n",
        "                        sent,                    \n",
        "                        add_special_tokens = True, \n",
        "                        max_length = 130,          \n",
        "                        padding='max_length',\n",
        "                        return_attention_mask = True, \n",
        "                        return_tensors = 'pt', \n",
        "                   )\n",
        "    input_ids.append(encoded_dict['input_ids'])\n",
        "    \n",
        "    attention_masks.append(encoded_dict['attention_mask'])\n",
        "\n",
        "input_ids = torch.cat(input_ids, dim=0)\n",
        "attention_masks = torch.cat(attention_masks, dim=0)\n",
        "labels = torch.tensor(labels)\n",
        "\n",
        "# Print sentence 0, now as a list of IDs.\n",
        "print('Original: ', sentences[0])\n",
        "print('Token IDs:', input_ids[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Original:  Big banks are making record profits by charging sky-high interest rates &amp; fees. Unacceptable. If we're going to rebuild the middle class we must significantly reduce consumer debt. I will be reintroducing my bill to end Wall Street greed &amp; cap credit card interest rates at 15%.\n",
            "Token IDs: tensor([  101,  2502,  5085,  2024,  2437,  2501, 11372,  2011, 13003,  3712,\n",
            "         1011,  2152,  3037,  6165,  1004, 23713,  1025,  9883,  1012, 21873,\n",
            "         1012,  2065,  2057,  1005,  2128,  2183,  2000, 14591,  1996,  2690,\n",
            "         2465,  2057,  2442,  6022,  5547,  7325,  7016,  1012,  1045,  2097,\n",
            "         2022, 27788, 13181,  8566,  6129,  2026,  3021,  2000,  2203,  2813,\n",
            "         2395, 22040,  1004, 23713,  1025,  6178,  4923,  4003,  3037,  6165,\n",
            "         2012,  2321,  1003,  1012,   102,     0,     0,     0,     0,     0,\n",
            "            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
            "            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
            "            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
            "            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
            "            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
            "            0,     0,     0,     0,     0,     0,     0,     0,     0,     0])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_qw9EvEV75s-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad7b6751-9c45-4ee0-958b-0be049e000e5"
      },
      "source": [
        "# Combine the training inputs into a TensorDataset.\n",
        "dataset = TensorDataset(input_ids, attention_masks, labels)\n",
        "\n",
        "# Create a 90-10 train-validation split.\n",
        "\n",
        "# Calculate the number of samples to include in each set.\n",
        "train_size = int(0.90 * len(dataset))\n",
        "val_size = len(dataset) - train_size\n",
        "\n",
        "# Divide the dataset by randomly selecting samples.\n",
        "train_dataset, val_dataset = random_split(dataset, [train_size, val_size])\n",
        "\n",
        "print('{:>5,} training samples'.format(train_size))\n",
        "print('{:>5,} validation samples'.format(val_size))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2,423 training samples\n",
            "  270 validation samples\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wyUl-Bb677-M"
      },
      "source": [
        "# we are making our batches now for training this will overwrite saved one\n",
        "\n",
        "batch_size = 32\n",
        "\n",
        "# we have now training data at random \n",
        "train_dataloader = DataLoader(\n",
        "            train_dataset,  \n",
        "            sampler = RandomSampler(train_dataset),\n",
        "            batch_size = batch_size\n",
        "        )\n",
        "\n",
        "# our training data to train on :)\n",
        "validation_dataloader = DataLoader(\n",
        "            val_dataset,\n",
        "            sampler = SequentialSampler(val_dataset),\n",
        "            batch_size = batch_size\n",
        "        )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D1KApJnL8Alw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220,
          "referenced_widgets": [
            "0705999e045845be9854e917dd0ab92e",
            "3c56d9ff1a714d3ba0864844478cda7d",
            "cdb6cf3e428e441c8fa6d4f0e1c90fe0",
            "6eff1a3259754340bfe94e156f5e64fb",
            "1ae48c3800524b2b8f23445468a7020e",
            "1e34bd77078a490980846b95b6dcd188",
            "e1de4056e27e4041b8b3c6112378128a",
            "2a3e4bb383db44018a6f23b88f969f17",
            "4013e33d385a471382a8670aedc7ce5d",
            "210c58c81fa444d9b5a3b5fe965de1dd",
            "318e4184939c426290a574bf7388feac",
            "d6a7ba8f56034188b9721d311ff2d9d2",
            "fc96819819a34cb0a1f9d216a97dff03",
            "282557816b274a2da4bc921dfbc80026",
            "95fb34fa1ae74fb1b59c7d183a529d1f",
            "5dfa654a409442b8b0fdb14a1d298723"
          ]
        },
        "outputId": "2c3f59c0-e7a9-4d48-c3c7-4697532c742b"
      },
      "source": [
        "# load our bert!\n",
        "model = BertForSequenceClassification.from_pretrained(\n",
        "    'bert-base-uncased', # tweet vocab\n",
        "    num_labels = 2, # binary\n",
        "    output_attentions = False, \n",
        "    output_hidden_states = False,\n",
        ")\n",
        "\n",
        "if exists_gpu():\n",
        "  model.cuda()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0705999e045845be9854e917dd0ab92e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=433.0, style=ProgressStyle(description_…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "4013e33d385a471382a8670aedc7ce5d",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=440473133.0, style=ProgressStyle(descri…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias']\n",
            "- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P5dfQgVq8C5B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cac049f6-9d0b-44ff-efc3-60a095c446b4"
      },
      "source": [
        "# Get all of the model's parameters as a list of tuples.\n",
        "params = list(model.named_parameters())\n",
        "\n",
        "print('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n",
        "\n",
        "print('==== Embedding Layer ====\\n')\n",
        "\n",
        "for p in params[0:5]:\n",
        "    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n",
        "print('\\n==== First Transformer ====\\n')\n",
        "for p in params[5:21]:\n",
        "    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n",
        "print('\\n==== Output Layer ====\\n')\n",
        "for p in params[-4:]:\n",
        "    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The BERT model has 201 different named parameters.\n",
            "\n",
            "==== Embedding Layer ====\n",
            "\n",
            "bert.embeddings.word_embeddings.weight                  (30522, 768)\n",
            "bert.embeddings.position_embeddings.weight                (512, 768)\n",
            "bert.embeddings.token_type_embeddings.weight                (2, 768)\n",
            "bert.embeddings.LayerNorm.weight                              (768,)\n",
            "bert.embeddings.LayerNorm.bias                                (768,)\n",
            "\n",
            "==== First Transformer ====\n",
            "\n",
            "bert.encoder.layer.0.attention.self.query.weight          (768, 768)\n",
            "bert.encoder.layer.0.attention.self.query.bias                (768,)\n",
            "bert.encoder.layer.0.attention.self.key.weight            (768, 768)\n",
            "bert.encoder.layer.0.attention.self.key.bias                  (768,)\n",
            "bert.encoder.layer.0.attention.self.value.weight          (768, 768)\n",
            "bert.encoder.layer.0.attention.self.value.bias                (768,)\n",
            "bert.encoder.layer.0.attention.output.dense.weight        (768, 768)\n",
            "bert.encoder.layer.0.attention.output.dense.bias              (768,)\n",
            "bert.encoder.layer.0.attention.output.LayerNorm.weight        (768,)\n",
            "bert.encoder.layer.0.attention.output.LayerNorm.bias          (768,)\n",
            "bert.encoder.layer.0.intermediate.dense.weight           (3072, 768)\n",
            "bert.encoder.layer.0.intermediate.dense.bias                 (3072,)\n",
            "bert.encoder.layer.0.output.dense.weight                 (768, 3072)\n",
            "bert.encoder.layer.0.output.dense.bias                        (768,)\n",
            "bert.encoder.layer.0.output.LayerNorm.weight                  (768,)\n",
            "bert.encoder.layer.0.output.LayerNorm.bias                    (768,)\n",
            "\n",
            "==== Output Layer ====\n",
            "\n",
            "bert.pooler.dense.weight                                  (768, 768)\n",
            "bert.pooler.dense.bias                                        (768,)\n",
            "classifier.weight                                           (2, 768)\n",
            "classifier.bias                                                 (2,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jaZH7fJs4l2W"
      },
      "source": [
        "This is where training is just incase you need to train a current model that has been saved. You also want to load the data from the last run if you want to reproduce it"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J6InMbo68J50"
      },
      "source": [
        "# this is where our scheduler and optimizer are made :)\n",
        "opt = AdamW(model.parameters(),\n",
        "                  lr = 2e-5,\n",
        "                  eps = 1e-8\n",
        "                )\n",
        "epochs = 3\n",
        "total_steps = len(train_dataloader) * epochs\n",
        "\n",
        "# Create the learning rate scheduler.\n",
        "scheduler = get_linear_schedule_with_warmup(opt, \n",
        "                                            num_warmup_steps = 0, # Default value in run_glue.py\n",
        "                                            num_training_steps = total_steps)"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZW_zj7SO8QSK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36520c92-226d-475e-de4f-05ff34745c3a"
      },
      "source": [
        "# This training code is based on the `run_glue.py` script here:\n",
        "# https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128\n",
        "\n",
        "# Set the seed value all over the place to make this reproducible.\n",
        "seed_val = 42\n",
        "device = get_gpu()\n",
        "random.seed(seed_val)\n",
        "np.random.seed(seed_val)\n",
        "torch.manual_seed(seed_val)\n",
        "torch.cuda.manual_seed_all(seed_val)\n",
        "\n",
        "# We'll store a number of quantities such as training and validation loss, \n",
        "# validation accuracy, and timings.\n",
        "training_stats = []\n",
        "\n",
        "# Measure the total training time for the whole run.\n",
        "total_t0 = time.time()\n",
        "\n",
        "# For each epoch...\n",
        "for epoch_i in range(0, epochs):\n",
        "    \n",
        "    # ========================================\n",
        "    #               Training\n",
        "    # ========================================\n",
        "    \n",
        "    # Perform one full pass over the training set.\n",
        "\n",
        "    print(\"\")\n",
        "    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n",
        "    print('Training...')\n",
        "\n",
        "    # Measure how long the training epoch takes.\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Reset the total loss for this epoch.\n",
        "    total_train_loss = 0\n",
        "\n",
        "    # Put the model into training mode. Don't be mislead--the call to \n",
        "    # `train` just changes the *mode*, it doesn't *perform* the training.\n",
        "    # `dropout` and `batchnorm` layers behave differently during training\n",
        "    # vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)\n",
        "    model.train()\n",
        "\n",
        "    # For each batch of training data...\n",
        "    for step, batch in enumerate(train_dataloader):\n",
        "\n",
        "        # Progress update every 40 batches.\n",
        "        if step % 40 == 0 and not step == 0:\n",
        "            # Calculate elapsed time in minutes.\n",
        "            elapsed = format_time(time.time() - t0)\n",
        "            \n",
        "            # Report progress.\n",
        "            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n",
        "\n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n",
        "        # `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "\n",
        "        # Always clear any previously calculated gradients before performing a\n",
        "        # backward pass. PyTorch doesn't do this automatically because \n",
        "        # accumulating the gradients is \"convenient while training RNNs\". \n",
        "        # (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)\n",
        "        model.zero_grad()        \n",
        "\n",
        "        # Perform a forward pass (evaluate the model on this training batch).\n",
        "        # The documentation for this `model` function is here: \n",
        "        # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification\n",
        "        # It returns different numbers of parameters depending on what arguments\n",
        "        # arge given and what flags are set. For our useage here, it returns\n",
        "        # the loss (because we provided labels) and the \"logits\"--the model\n",
        "        # outputs prior to activation.\n",
        "        m = model(b_input_ids, \n",
        "                                token_type_ids=None, \n",
        "                                attention_mask=b_input_mask,\n",
        "                                labels=b_labels)\n",
        "        loss = m[0]\n",
        "        logitcs = m[1]\n",
        "        # Accumulate the training loss over all of the batches so that we can\n",
        "        # calculate the average loss at the end. `loss` is a Tensor containing a\n",
        "        # single value; the `.item()` function just returns the Python value \n",
        "        # from the tensor.\n",
        "        total_train_loss += loss.item()\n",
        "\n",
        "        # Perform a backward pass to calculate the gradients.\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the norm of the gradients to 1.0.\n",
        "        # This is to help prevent the \"exploding gradients\" problem.\n",
        "        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
        "\n",
        "        # Update parameters and take a step using the computed gradient.\n",
        "        # The optimizer dictates the \"update rule\"--how the parameters are\n",
        "        # modified based on their gradients, the learning rate, etc.\n",
        "        opt.step()\n",
        "\n",
        "        # Update the learning rate.\n",
        "        scheduler.step()\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_train_loss = total_train_loss / len(train_dataloader)            \n",
        "    \n",
        "    # Measure how long this epoch took.\n",
        "    training_time = format_time(time.time() - t0)\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n",
        "    print(\"  Training epcoh took: {:}\".format(training_time))\n",
        "        \n",
        "    # ========================================\n",
        "    #               Validation\n",
        "    # ========================================\n",
        "    # After the completion of each training epoch, measure our performance on\n",
        "    # our validation set.\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"Running Validation...\")\n",
        "\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Put the model in evaluation mode--the dropout layers behave differently\n",
        "    # during evaluation.\n",
        "    model.eval()\n",
        "\n",
        "    # Tracking variables \n",
        "    total_eval_accuracy = 0\n",
        "    total_eval_loss = 0\n",
        "    nb_eval_steps = 0\n",
        "\n",
        "    # Evaluate data for one epoch\n",
        "    for batch in validation_dataloader:\n",
        "        \n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using \n",
        "        # the `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "        \n",
        "        # Tell pytorch not to bother with constructing the compute graph during\n",
        "        # the forward pass, since this is only needed for backprop (training).\n",
        "        with torch.no_grad():        \n",
        "\n",
        "            # Forward pass, calculate logit predictions.\n",
        "            # token_type_ids is the same as the \"segment ids\", which \n",
        "            # differentiates sentence 1 and 2 in 2-sentence tasks.\n",
        "            # The documentation for this `model` function is here: \n",
        "            # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification\n",
        "            # Get the \"logits\" output by the model. The \"logits\" are the output\n",
        "            # values prior to applying an activation function like the softmax.\n",
        "            m = model(b_input_ids, \n",
        "                                   token_type_ids=None, \n",
        "                                   attention_mask=b_input_mask,\n",
        "                                   labels=b_labels)\n",
        "            loss = m[0]\n",
        "            logits = m[1]\n",
        "        # Accumulate the validation loss.\n",
        "        total_eval_loss += loss.item()\n",
        "\n",
        "        # Move logits and labels to CPU\n",
        "        logits = logits.detach().cpu().numpy()\n",
        "        label_ids = b_labels.to('cpu').numpy()\n",
        "\n",
        "        # Calculate the accuracy for this batch of test sentences, and\n",
        "        # accumulate it over all batches.\n",
        "        total_eval_accuracy += flat_accuracy(logits, label_ids)\n",
        "        \n",
        "\n",
        "    # Report the final accuracy for this validation run.\n",
        "    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader)\n",
        "    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_val_loss = total_eval_loss / len(validation_dataloader)\n",
        "    \n",
        "    # Measure how long the validation run took.\n",
        "    validation_time = format_time(time.time() - t0)\n",
        "    \n",
        "    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n",
        "    print(\"  Validation took: {:}\".format(validation_time))\n",
        "\n",
        "    # Record all statistics from this epoch.\n",
        "    training_stats.append(\n",
        "        {\n",
        "            'epoch': epoch_i + 1,\n",
        "            'Training Loss': avg_train_loss,\n",
        "            'Valid. Loss': avg_val_loss,\n",
        "            'Valid. Accur.': avg_val_accuracy,\n",
        "            'Training Time': training_time,\n",
        "            'Validation Time': validation_time\n",
        "        }\n",
        "    )\n",
        "\n",
        "print(\"\")\n",
        "print(\"Training complete!\")\n",
        "\n",
        "print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "======== Epoch 1 / 3 ========\n",
            "Training...\n",
            "  Batch    40  of     76.    Elapsed: 0:00:31.\n",
            "\n",
            "  Average training loss: 0.57\n",
            "  Training epcoh took: 0:00:59\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.74\n",
            "  Validation Loss: 0.54\n",
            "  Validation took: 0:00:02\n",
            "\n",
            "======== Epoch 2 / 3 ========\n",
            "Training...\n",
            "  Batch    40  of     76.    Elapsed: 0:00:30.\n",
            "\n",
            "  Average training loss: 0.52\n",
            "  Training epcoh took: 0:00:58\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.71\n",
            "  Validation Loss: 0.55\n",
            "  Validation took: 0:00:02\n",
            "\n",
            "======== Epoch 3 / 3 ========\n",
            "Training...\n",
            "  Batch    40  of     76.    Elapsed: 0:00:31.\n",
            "\n",
            "  Average training loss: 0.48\n",
            "  Training epcoh took: 0:00:58\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.69\n",
            "  Validation Loss: 0.58\n",
            "  Validation took: 0:00:02\n",
            "\n",
            "Training complete!\n",
            "Total training took 0:03:01 (h:mm:ss)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQsiusw38Sc4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "8ab09137-cfbf-4574-a888-6564daf31fd1"
      },
      "source": [
        "# Display floats with two decimal places.\n",
        "pd.set_option('precision', 2)\n",
        "\n",
        "# Create a DataFrame from our training statistics.\n",
        "df_stats = pd.DataFrame(data=training_stats)\n",
        "df_stats = df_stats.set_index('epoch')\n",
        "\n",
        "df_stats"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Valid. Loss</th>\n",
              "      <th>Valid. Accur.</th>\n",
              "      <th>Training Time</th>\n",
              "      <th>Validation Time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>epoch</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.57</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0:00:59</td>\n",
              "      <td>0:00:02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.52</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.71</td>\n",
              "      <td>0:00:58</td>\n",
              "      <td>0:00:02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.48</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.69</td>\n",
              "      <td>0:00:58</td>\n",
              "      <td>0:00:02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Training Loss  Valid. Loss  Valid. Accur. Training Time Validation Time\n",
              "epoch                                                                         \n",
              "1               0.57         0.54           0.74       0:00:59         0:00:02\n",
              "2               0.52         0.55           0.71       0:00:58         0:00:02\n",
              "3               0.48         0.58           0.69       0:00:58         0:00:02"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jvj3Nio-8UQa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "outputId": "2d847c1a-13aa-47e1-9b6d-09f646ad34e7"
      },
      "source": [
        "sns.set(style='darkgrid')\n",
        "\n",
        "sns.set(font_scale=1.5)\n",
        "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
        "\n",
        "plt.plot(df_stats['Training Loss'], 'b-o', label=\"Training\")\n",
        "plt.plot(df_stats['Valid. Loss'], 'g-o', label=\"Validation\")\n",
        "\n",
        "plt.title(\"Training & Validation Loss\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.xticks([1, 2, 3, 4])\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "id": "UKWaZqeBptgk",
        "outputId": "105c8b01-c0df-4ebc-fb4e-fcd64e925880"
      },
      "source": [
        "# SAVE THE MODEL FOR LATER USE\n",
        "import pickle\n",
        "\n",
        "save_dir = './model_save/'\n",
        "save_dir_params = './model_save/params/'\n",
        "Create output directory if needed\n",
        "if not os.path.exists(save_dir):\n",
        "  os.makedirs(save_dir)\n",
        "if not os.path.exists(save_dir_params):\n",
        "  os.makedirs(save_dir_params)\n",
        "\n",
        "print('Saving model to %s' % save_dir)\n",
        "model_to_save = model.module if hasattr(model, 'module') else model  # Take care of distributed/parallel training\n",
        "model_to_save.save_pretrained(save_dir)\n",
        "tokenizer.save_pretrained(save_dir)\n",
        "\n",
        "with open(save_dir_params + 'training_data_loader', 'wb+') as f:\n",
        "  joblib.dump(train_dataloader, f)\n",
        "with open(save_dir_params + 'validation_data_loader', 'wb+') as f:\n",
        "  joblib.dump(validation_dataloader, f)\n",
        "\n",
        "print('Successfuly saved the model to %s' % save_dir)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saving model to /content/drive/bert_model/\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "OSError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-7d9b00f851b0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Saving model to %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0msave_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mmodel_to_save\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodule\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'module'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mmodel\u001b[0m  \u001b[0;31m# Take care of distributed/parallel training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mmodel_to_save\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_pretrained\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msave_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_pretrained\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msave_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/transformers/modeling_utils.py\u001b[0m in \u001b[0;36msave_pretrained\u001b[0;34m(self, save_directory)\u001b[0m\n\u001b[1;32m    710\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Provided path ({}) should be a directory, not a file\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msave_directory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    711\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 712\u001b[0;31m         \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msave_directory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexist_ok\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    713\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    714\u001b[0m         \u001b[0;31m# Only save the model itself if we are using distributed training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/os.py\u001b[0m in \u001b[0;36mmakedirs\u001b[0;34m(name, mode, exist_ok)\u001b[0m\n\u001b[1;32m    218\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mmkdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0;31m# Cannot rely on checking for EEXIST, since the operating system\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mOSError\u001b[0m: [Errno 95] Operation not supported: '/content/drive/bert_model/'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "duYv562Rs24m",
        "outputId": "5c112c55-f284-4260-a138-c80611d50601"
      },
      "source": [
        "!zip -r ./model_save.zip ./model_save"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  adding: model_save/ (stored 0%)\n",
            "  adding: model_save/pytorch_model.bin (deflated 7%)\n",
            "  adding: model_save/tokenizer_config.json (deflated 41%)\n",
            "  adding: model_save/config.json (deflated 45%)\n",
            "  adding: model_save/vocab.txt (deflated 53%)\n",
            "  adding: model_save/params/ (stored 0%)\n",
            "  adding: model_save/params/training_data_loader (deflated 96%)\n",
            "  adding: model_save/params/validation_data_loader (deflated 96%)\n",
            "  adding: model_save/special_tokens_map.json (deflated 40%)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "id": "oyu5JmCrtBrC",
        "outputId": "7f199bb6-4cda-469d-ed3b-53eb331a48e9"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "from google.colab import files\n",
        "files.download(\"/content/model_save.zip\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_125552d9-a1b6-4106-bffd-71924aad03ed\", \"model_save.zip\", 405867496)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AG3rCQlLpRCy"
      },
      "source": [
        "# Tests the data with the Model\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-T-7lmO2yoFo"
      },
      "source": [
        "from os import walk\n",
        "tweet_directory = '.'\n",
        "csv_file_test_celeb = 'tweets_test_celeb.csv'\n",
        "f = []\n",
        "for (dirpath, dirnames, filenames) in walk(tweet_directory):\n",
        "    f = filenames\n",
        "    break\n",
        "test_data_celebs = f[int(len(f)//1.2):]\n",
        "\n",
        "device = get_gpu()\n",
        "# Load the dataset into a pandas dataframe.\n",
        "count_test_celebs, sentiments_test_celebs = get_tweets_into_csv_from_celebrities(csv_file=csv_file_test_celeb, files=test_data_celebs)\n",
        "\n",
        "df_test_celeb = pd.read_csv(csv_file_test_celeb, delimiter=',', header=None, \n",
        "                             names=['sentence_source', 'label', \n",
        "                                    'label_notes', 'sentence'])\n",
        "# # Create sentence and label lists\n",
        "sentences = df_test_celeb.sentence.values\n",
        "labels = df_test_celeb.label.values\n",
        "\n",
        "input_ids = []\n",
        "attention_masks = []\n",
        "\n",
        "for sent in sentences:\n",
        "    encoded_dict = tokenizer.encode_plus(\n",
        "                        sent,                      \n",
        "                        add_special_tokens = True,\n",
        "                        max_length = 130,\n",
        "                        padding = 'max_length',\n",
        "                        return_attention_mask = True,\n",
        "                        return_tensors = 'pt',\n",
        "                   )\n",
        "\n",
        "    input_ids.append(encoded_dict['input_ids'])\n",
        "    attention_masks.append(encoded_dict['attention_mask'])\n",
        "\n",
        "# tensors\n",
        "input_ids = torch.cat(input_ids, dim=0)\n",
        "attention_masks = torch.cat(attention_masks, dim=0)\n",
        "labels = torch.tensor(labels)\n",
        "\n",
        "# Set the batch size.  \n",
        "batch_size = 32  \n",
        "\n",
        "# Create the DataLoader.\n",
        "prediction_data = TensorDataset(input_ids, attention_masks, labels)\n",
        "prediction_sampler = SequentialSampler(prediction_data)\n",
        "prediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, \n",
        "                                   batch_size=batch_size)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ETYy83318WDT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "947b8943-ab71-4004-c3e1-3922d9a6cb01"
      },
      "source": [
        "# Prediction on test set\n",
        "\n",
        "print('Predicting labels for {:,} test sentences...'.format(len(input_ids)))\n",
        "\n",
        "# Put model in evaluation mode\n",
        "model.eval()\n",
        "\n",
        "# Tracking variables \n",
        "predictions , true_labels = [], []\n",
        "\n",
        "# Predict \n",
        "for batch in prediction_dataloader:\n",
        "  # Add batch to GPU\n",
        "  batch = tuple(t.to(device) for t in batch)\n",
        "  \n",
        "  # Unpack the inputs from our dataloader\n",
        "  b_input_ids, b_input_mask, b_labels = batch\n",
        "  \n",
        "  # Telling the model not to compute or store gradients, saving memory and \n",
        "  # speeding up prediction\n",
        "  with torch.no_grad():\n",
        "      # Forward pass, calculate logit predictions\n",
        "      outputs = model(b_input_ids, token_type_ids=None, \n",
        "                      attention_mask=b_input_mask)\n",
        "\n",
        "  logits = outputs[0]\n",
        "\n",
        "  # Move logits and labels to CPU\n",
        "  logits = logits.detach().cpu().numpy()\n",
        "  label_ids = b_labels.to('cpu').numpy()\n",
        "  \n",
        "  # Store predictions and true labels\n",
        "  predictions.append(logits)\n",
        "  true_labels.append(label_ids)\n",
        "\n",
        "print('    DONE.')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Predicting labels for 600 test sentences...\n",
            "    DONE.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OuuR_J32z4m5",
        "outputId": "c51fb47f-ec7b-4522-aa37-9a86a83ac818"
      },
      "source": [
        "matthews_set = []\n",
        "\n",
        "# Evaluate each test batch using Matthew's correlation coefficient\n",
        "print('Calculating Matthews Corr. Coef. for each batch...')\n",
        "\n",
        "for i in range(len(true_labels)):\n",
        "  \n",
        "  pred_labels_i = np.argmax(predictions[i], axis=1).flatten()\n",
        "  # Calculate and store the coef for this batch.  \n",
        "  matthews = matthews_corrcoef(true_labels[i], pred_labels_i)            \n",
        "  matthews_set.append(matthews)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Calculating Matthews Corr. Coef. for each batch...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 610
        },
        "id": "LUo9_Vvr0EFr",
        "outputId": "5d2f018a-3e02-4d77-dbf4-faa5c2b927dc"
      },
      "source": [
        "# Create a barplot showing the MCC score for each batch of test samples.\n",
        "plt.rcParams[\"figure.figsize\"]=(30, 15)\n",
        "\n",
        "ax = sns.barplot(x=list(range(len(matthews_set))), y=matthews_set, ci=None)\n",
        "\n",
        "plt.title('MCC Score per Batch')\n",
        "plt.ylabel('MCC Score (-1 to +1)')\n",
        "plt.xlabel('Batch #')\n",
        "plt.show()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 2160x1080 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mU-hD-N48aB2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75e2274e-eb3d-4ab6-f419-85ec77c2af02"
      },
      "source": [
        "# calculate our score\n",
        "flat_predictions = np.concatenate(predictions, axis=0)\n",
        "\n",
        "flat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n",
        "flat_true_labels = np.concatenate(true_labels, axis=0)\n",
        "mcc = matthews_corrcoef(flat_true_labels, flat_predictions)\n",
        "\n",
        "print('Total MCC for BERT: %.3f' % mcc)\n",
        "print('Total MCC for Sentiment: %.3f' % matthews_corrcoef(labels, normalize_sentiment_values(sentiments_test_celebs)))"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total MCC for BERT: 0.152\n",
            "600\n",
            "Total MCC for Sentiment: -0.027\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pdhdxTDFmDnl"
      },
      "source": [
        "## Lingusitic Probability Models\n",
        "We can use lingusitics to study different features of a tweets."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Q9qTpkF502_"
      },
      "source": [
        "from emoji import UNICODE_EMOJI\n",
        "\n",
        "def is_emoji(s):\n",
        "    count = 0\n",
        "    for emoji in UNICODE_EMOJI:\n",
        "        count += s.count(emoji)\n",
        "        if count > 1:\n",
        "            return False\n",
        "    return bool(count)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZGbVu05i52Z4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be6b9fc9-3762-4888-ecd8-edbb14bb1312"
      },
      "source": [
        "from os import walk\n",
        "tweet_directory = '.'\n",
        "csv_file_celeb = 'tweets_celeb.csv'\n",
        "f = []\n",
        "for (dirpath, dirnames, filenames) in walk(tweet_directory):\n",
        "    f = filenames\n",
        "    break\n",
        "\n",
        "data_celebs = f\n",
        "\n",
        "# Load the dataset into a pandas dataframe.\n",
        "count_celebs, sentiments_celebs = get_tweets_into_csv_from_celebrities(csv_file=csv_file_celeb, files=data_celebs)\n",
        "\n",
        "df_celeb = pd.read_csv(csv_file_celeb, delimiter=',', header=None, \n",
        "                             names=['sentence_source', 'label', \n",
        "                                    'label_notes', 'sentence'])"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "File Random_Users.json is corrupted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thNeq5R66FVJ",
        "outputId": "9959fd34-a3e7-438f-f224-7a4b26fda6ea"
      },
      "source": [
        "# lets calculate conditional probabilities of emojis and popularity\n",
        "# and overall proportions\n",
        "\n",
        "labels = list(df_celeb.label.values)\n",
        "sentences = list(df_celeb.sentence.values)\n",
        "\n",
        "emoji_pop = 0\n",
        "emoji_unpop = 0\n",
        "no_emoji_pop = 0\n",
        "no_emoji_unpop = 0\n",
        "\n",
        "for sent, label in zip(sentences, labels):\n",
        "  if is_emoji(sent):\n",
        "    if label == 0:\n",
        "      emoji_unpop += 1\n",
        "    else:\n",
        "      emoji_pop += 1\n",
        "  else:\n",
        "    if label == 0:\n",
        "      no_emoji_unpop += 1\n",
        "    else:\n",
        "      no_emoji_pop += 1\n",
        "\n",
        "total_tweets = len(sentences)\n",
        "p_pop_emoji = (emoji_pop / (total_tweets))/((emoji_pop + emoji_unpop) / (total_tweets))\n",
        "p_unpop_emoji = (emoji_unpop / (total_tweets))/((emoji_pop + emoji_unpop) / (total_tweets))\n",
        "p_pop_no_emoji = (no_emoji_pop / (total_tweets))/((no_emoji_pop + no_emoji_unpop) / (total_tweets))\n",
        "p_unpop_no_emoji = (no_emoji_unpop / (total_tweets))/((no_emoji_pop + no_emoji_unpop) / (total_tweets))\n",
        "\n",
        "print('Popular tweets with emojis: ', emoji_pop)\n",
        "print('P(Popular | Emoji) = ', p_pop_emoji)\n",
        "print('Un-Popular tweets with emojis: ', emoji_unpop)\n",
        "print('P(UnPopular | Emoji) = ', p_unpop_emoji)\n",
        "print('Popular tweets without emojis: ', no_emoji_pop)\n",
        "print('P(Popular | No_Emoji) = ', p_pop_no_emoji)\n",
        "print('Un-Popular tweets without emojis: ', no_emoji_unpop)\n",
        "print('P(UnPopular | No_Emoji) = ', p_unpop_no_emoji)\n"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Popular tweets with emojis:  107\n",
            "P(Popular | Emoji) =  0.2853333333333333\n",
            "Un-Popular tweets with emojis:  268\n",
            "P(UnPopular | Emoji) =  0.7146666666666667\n",
            "Popular tweets without emojis:  856\n",
            "P(Popular | No_Emoji) =  0.26994638915168717\n",
            "Un-Popular tweets without emojis:  2315\n",
            "P(UnPopular | No_Emoji) =  0.7300536108483128\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VLCDbYd668YS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da9638d8-de5b-441b-ed55-6947b5ed2995"
      },
      "source": [
        "# HashTags\n",
        "\n",
        "def has_hashtag(sent):\n",
        "  return '#' in sent\n",
        "\n",
        "labels = list(df_celeb.label.values)\n",
        "sentences = list(df_celeb.sentence.values)\n",
        "\n",
        "hashtag_pop = 0\n",
        "hashtag_unpop = 0\n",
        "no_hashtag_pop = 0\n",
        "no_hashtag_unpop = 0\n",
        "\n",
        "for sent, label in zip(sentences, labels):\n",
        "  if has_hashtag(sent):\n",
        "    if label == 0:\n",
        "      hashtag_unpop += 1\n",
        "    else:\n",
        "      hashtag_pop += 1\n",
        "  else:\n",
        "    if label == 0:\n",
        "      no_hashtag_unpop += 1\n",
        "    else:\n",
        "      no_hashtag_pop += 1\n",
        "\n",
        "total_tweets = len(sentences)\n",
        "p_pop_hashtag = (hashtag_pop / (total_tweets))/((hashtag_pop + hashtag_unpop) / (total_tweets))\n",
        "p_unpop_hashtag = (hashtag_unpop / (total_tweets))/((hashtag_pop + hashtag_unpop) / (total_tweets))\n",
        "p_pop_no_hashtag = (no_hashtag_pop / (total_tweets))/((no_hashtag_pop + no_hashtag_unpop) / (total_tweets))\n",
        "p_unpop_no_hashtag = (no_hashtag_unpop / (total_tweets))/((no_hashtag_pop + no_hashtag_unpop) / (total_tweets))\n",
        "\n",
        "print('Popular tweets with hashtags: ', hashtag_pop)\n",
        "print('P(Popular | Hashtag) = ', p_pop_hashtag)\n",
        "print('Un-Popular tweets with hashtags: ', hashtag_unpop)\n",
        "print('P(Un-Popular | Hashtag) = ', p_unpop_hashtag)\n",
        "print('Popular tweets without hastags: ', no_hashtag_pop)\n",
        "print('P(Popular | No Hashtag) = ', p_pop_no_hashtag)\n",
        "print('Un-Popular tweets without hashtags: ', no_hashtag_unpop)\n",
        "print('P(Un-Popular | No Hashtag) = ', p_unpop_no_hashtag)\n"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Popular tweets with hashtags:  251\n",
            "P(Popular | Hashtag) =  0.21452991452991454\n",
            "Un-Popular tweets with hashtags:  919\n",
            "P(Un-Popular | Hashtag) =  0.7854700854700855\n",
            "Popular tweets without hastags:  712\n",
            "P(Popular | No Hashtag) =  0.29966329966329963\n",
            "Un-Popular tweets without hashtags:  1664\n",
            "P(Un-Popular | No Hashtag) =  0.7003367003367003\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xE_5u-DaDjTP",
        "outputId": "aff59423-655c-4b47-c0dd-7e7d5eb76c4a"
      },
      "source": [
        "# Excessive Caps\n",
        "\n",
        "def caps_threshold(sent):\n",
        "  uppers = [l for l in sent if l.isupper()]\n",
        "  letters = [l for l in sent if l.isalpha()]\n",
        "  if len(letters) < 10:\n",
        "    return 0\n",
        "  return len(uppers) / len (letters)\n",
        "\n",
        "labels = list(df_celeb.label.values)\n",
        "sentences = list(df_celeb.sentence.values)\n",
        "\n",
        "caps_pop = 0\n",
        "caps_unpop = 0\n",
        "no_caps_pop = 0\n",
        "no_caps_unpop = 0\n",
        "\n",
        "for sent, label in zip(sentences, labels):\n",
        "  if caps_threshold(sent) >= .20:\n",
        "    if label == 0:\n",
        "      caps_unpop += 1\n",
        "    else:\n",
        "      caps_pop += 1\n",
        "  else:\n",
        "    if label == 0:\n",
        "      no_caps_unpop += 1\n",
        "    else:\n",
        "      no_caps_pop += 1\n",
        "\n",
        "total_tweets = len(sentences)\n",
        "p_pop_caps = (caps_pop / (total_tweets))/((caps_pop + caps_unpop) / (total_tweets))\n",
        "p_unpop_caps = (caps_unpop / (total_tweets))/((caps_pop + caps_unpop) / (total_tweets))\n",
        "p_pop_no_caps = (no_caps_pop / (total_tweets))/((no_caps_pop + no_caps_unpop) / (total_tweets))\n",
        "p_unpop_no_caps = (no_caps_unpop / (total_tweets))/((no_caps_pop + no_caps_unpop) / (total_tweets))\n",
        "\n",
        "print('Popular tweets with caps: ', caps_pop)\n",
        "print('P(Popular | Caps) = ', p_pop_caps)\n",
        "print('Un-Popular tweets with caps: ', caps_unpop)\n",
        "print('P(Un-Popular | Caps) = ', p_unpop_caps)\n",
        "print('Popular tweets without caps: ', no_caps_pop)\n",
        "print('P(Popular | Caps) = ', p_pop_no_caps)\n",
        "print('Un-Popular tweets without caps: ', no_caps_unpop)\n",
        "print('P(Un-Popular | Caps) = ', p_unpop_no_caps)\n"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Popular tweets with caps:  217\n",
            "P(Popular | Caps) =  0.2866578599735799\n",
            "Un-Popular tweets with caps:  540\n",
            "P(Un-Popular | Caps) =  0.7133421400264202\n",
            "Popular tweets without caps:  746\n",
            "P(Popular | Caps) =  0.26747938329150234\n",
            "Un-Popular tweets without caps:  2043\n",
            "P(Un-Popular | Caps) =  0.7325206167084977\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uz_Uy-LRECAI",
        "outputId": "1de50580-674c-4479-b82f-6d58dd6ed060"
      },
      "source": [
        "pop = 0\n",
        "unpop = 0\n",
        "for sent, label in zip(sentences, labels):\n",
        "  if label == 0:\n",
        "    unpop += 1\n",
        "  else:\n",
        "    pop += 1\n",
        "\n",
        "pop_prop = pop/ (pop + unpop)\n",
        "print('Number of Popular Tweets:' , pop)\n",
        "print('Proportion of Popular Tweets:' , pop_prop)\n",
        "print('Number of Un-Popular Tweets:', unpop)\n",
        "print('Proportion of Un-Popular Tweets:', 1-pop_prop)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of Popular Tweets: 963\n",
            "Proportion of Popular Tweets: 0.2715736040609137\n",
            "Number of Un-Popular Tweets: 2583\n",
            "Proportion of Un-Popular Tweets: 0.7284263959390863\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WYRosIyaLlia"
      },
      "source": [
        "# for random users analysis\n",
        "# crashes colab since the data file is too huge\n",
        "\n",
        "from os import walk\n",
        "tweet_directory = '.'\n",
        "data_file_random = 'random_users.json'\n",
        "csv_file_random = 'random_users.csv'\n",
        "\n",
        "# Load the dataset into a pandas dataframe.\n",
        "count_celebs, sentiments_random = get_tweets_into_csv_from_random(csv_file=csv_file_celeb, file=data_file_random)\n",
        "\n",
        "df_celeb = pd.read_csv(csv_file_celeb, delimiter=',', header=None, \n",
        "                             names=['sentence_source', 'label', \n",
        "                                    'label_notes', 'sentence'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M3XoOv1jZ7M8"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}